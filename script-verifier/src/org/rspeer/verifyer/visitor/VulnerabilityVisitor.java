package org.rspeer.verifyer.visitor;

import org.rspeer.verifyer.decline.violation.ClassViolation;

import java.util.*;
import java.util.function.Consumer;

public abstract class VulnerabilityVisitor<T> implements Consumer<T> {

    private Map<String, Set<ClassViolation>> classViolations = new HashMap<>();

    public abstract boolean consumes(Object object);

    protected void addClassViolation(String node, ClassViolation violation) {
        if (this.classViolations.containsKey(node)) {
            this.classViolations.get(node).add(violation);
        } else {
            HashSet<ClassViolation> nodeViolations = new HashSet<>();
            this.classViolations.put(node, nodeViolations);
        }
    }

    public void acceptIfConsumes(T type) {
        if (consumes(type)) {
            accept(type);
        }
    }

    public void after() {
        classViolations.clear();
    }

    public Map<String, Set<ClassViolation>> getClassViolations() {
        return classViolations;
    }
}
